<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JimmyJu</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jimmyju.github.io/"/>
  <updated>2017-06-14T05:47:29.000Z</updated>
  <id>https://jimmyju.github.io/</id>
  
  <author>
    <name>JimmyJu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自定义view之onMeasure()的理解</title>
    <link href="https://jimmyju.github.io/2017/06/12/%E8%87%AA%E5%AE%9A%E4%B9%89view%E4%B9%8BonMeasure-%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>https://jimmyju.github.io/2017/06/12/自定义view之onMeasure-的理解/</id>
    <published>2017-06-12T10:13:51.000Z</published>
    <updated>2017-06-14T05:47:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录下对于自定义view中方法的理解。<br>对于自定义view有三大流程：<code>onMeasure</code>（测量）、<code>onLayout</code>（布局）和<code>onDraw</code>（绘制）<br>接下来我就要说下<code>onMeasure()</code>这个方法：</p>
<a id="more"></a>
<h4 id="onMeasure"><a href="#onMeasure" class="headerlink" title="onMeasure"></a>onMeasure</h4><p>在布局文件中，对于自定义view的<code>layout_width</code>和<code>layout_height</code>不设置<code>wrap_content</code>,一般不需要进行处理，但如果要设置<code>wrap_content</code>，就要对宽高进行测量。<br><strong>onMeasure函数原型</strong>：<br><code>protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)</code></p>
<p>参数中的<code>widthMeasureSpec</code>和<code>heightMeasureSpec</code>里面包含了测量模式和尺寸，在这可以借助<strong>Android内置的MeasureSpec类</strong>来获取测量模式和尺寸：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">int widthSize = MeasureSpec.getSize(widthMeasureSpec);</div></pre></td></tr></table></figure>
<p>对于测量模式有三种情况：</p>
<table>
<thead>
<tr>
<th>测量模式</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>UNSPECIFIED</td>
<td>父容器没有对当前View有任何限制，当前View可以任意取尺寸</td>
</tr>
<tr>
<td>EXACTLY</td>
<td>当前尺寸就是当前View应该取的尺寸，对应于<code>match_parent</code>和具体数值情况</td>
</tr>
<tr>
<td>AT_MOST</td>
<td>当前View所能取的最大尺寸，一般是给定一个大小，view的尺寸不能超过该大小，一般用于<code>wrap_content</code></td>
</tr>
</tbody>
</table>
<p><strong>手重写onMeasure函数</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@Overrideprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">    super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">    int width = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">    int widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">    int height = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line">    int heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class="line"></div><div class="line">    if (widthMode == MeasureSpec.AT_MOST &amp;&amp; heightMode == MeasureSpec.AT_MOST) &#123;</div><div class="line">        setMeasuredDimension(WRAP_WIDTH, WRAP_HEIGHT);</div><div class="line">    &#125; else if (widthMode == MeasureSpec.AT_MOST) &#123;</div><div class="line">        setMeasuredDimension(WRAP_WIDTH, height);</div><div class="line">    &#125; else if (heightMode == MeasureSpec.AT_MOST) &#123;</div><div class="line">        setMeasuredDimension(width, WRAP_HEIGHT);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只处理AT_MOST情况也就是<code>wrap_content</code>,其他情况则沿用系统的测量值即可。<code>setMeasuredDimension</code>会设置View宽高的测量值，只有<code>setMeasuredDimension</code>调用之后，才能使用<code>getMeasuredWidth()</code>和<code>getMeasuredHeight()</code>来获取视图测量出的宽高，以此之前调用这两个方法得到的值都会是0。</p>
<p>注意：在覆写onMeasure方法的时候，必须调用 <code>setMeasuredDimension(int,int)</code>来存储这个View经过测量得到的measured width and height。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录下对于自定义view中方法的理解。&lt;br&gt;对于自定义view有三大流程：&lt;code&gt;onMeasure&lt;/code&gt;（测量）、&lt;code&gt;onLayout&lt;/code&gt;（布局）和&lt;code&gt;onDraw&lt;/code&gt;（绘制）&lt;br&gt;接下来我就要说下&lt;code&gt;onMeasure()&lt;/code&gt;这个方法：&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="https://jimmyju.github.io/categories/android/"/>
    
    
      <category term="view" scheme="https://jimmyju.github.io/tags/view/"/>
    
  </entry>
  
  <entry>
    <title>基于hexo+github搭建个人博客</title>
    <link href="https://jimmyju.github.io/2017/05/30/%E5%9F%BA%E4%BA%8Ehexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://jimmyju.github.io/2017/05/30/基于hexo+github搭建个人博客/</id>
    <published>2017-05-30T14:01:54.000Z</published>
    <updated>2017-05-31T09:28:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于最近刚搭建的博客，所以特此来记录下我的个人经验。注：本文使用的环境为Mac OS。Windows的也基本差不多，可以参考。</p>
<a id="more"></a>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>需要安装的工具包括：Node.js, Git, Hexo。</p>
<h4 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1. 安装Node.js"></a>1. 安装Node.js</h4><p>用来生成静态页面，建议<a href="https://nodejs.org/en/download/" target="_blank" rel="external">Node.js官网</a>下载，然后一路安装即可。</p>
<h4 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2.安装git"></a>2.安装git</h4><p>用来将本地Hexo内容提交到Github上。Xcode自带Git，这里不再赘述。或者点击<a href="https://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="external">安装程序</a>来下载安装git.</p>
<h4 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h4><p>以上都安装完毕后之后就可以安装Hexo, Hexo 是一个快速、简洁且高效的博客框架。终端命令：</p>
<p><code>$ sudo npm install -g hexo-cli</code></p>
<blockquote>
<p>这里要需要输入管理员密码（Mac登录密码）即开始安装 (sudo:linux系统管理指令 -g:全局安装) </p>
</blockquote>
<p>接下来在你磁盘上新建一个文件夹，比如”Hexo”然后cd到这个目录下，执行hexo init命令：</p>
<p><code>$ hexo init blog</code></p>
<blockquote>
<p>blog是你建立的文件夹名称。cd到blog文件夹下，执行如下命令，安装npm：</p>
</blockquote>
<p><code>$ npm install</code></p>
<p>现在已经搭建起一个本地博客了，接着输入一下命令生成静态文件：</p>
<p><code>$ hexo g</code></p>
<p>然后输入如下命令：</p>
<p><code>$ hexo s</code></p>
<p>启动服务器。默认情况下，访问网址为：<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>。(control+c停止)</p>
<h2 id="关联GitHub"><a href="#关联GitHub" class="headerlink" title="关联GitHub"></a>关联GitHub</h2><p>首先登录你的<a href="https://github.com" target="_blank" rel="external">Github帐号</a>，没有的可以先去注册下，这里就不多说了。</p>
<h4 id="1-创建仓库"><a href="#1-创建仓库" class="headerlink" title="1.创建仓库"></a>1.创建仓库</h4><p>在github首页，新建仓库，<strong>用户名.github.io固定写法</strong>,如下图所示：<img src="https://lh3.googleusercontent.com/8DvXwOaTXQUo2L6McfHbIvbx1E2bDCnt9mreyFj7JQkZit7CujOSZIvlfhu5BLbiRcSHa0OdIiuV_XwjnrpHrwWIJtvKgmPC_uGkswZUzdEi02zwEx-rIfpnLeD_bzCO6GPfmzGtOQC-y2z5RRWni4LqGoFoQgON_aseENRv1XWdwKB0e2t3rV2r6dGAatDvK4oTfvtMySfm2pAilHiukbXPab1henZ55VeuuMrrdGUo47PF6q0ct9jwWcp-OcyRLC6qtkvbZKAuGA-GFHYd8KOpSrdekdVg1-2kTmItCuAeFTSQzCwRvg8RDILKAhnF535uUsUp_QkWDHg1CeCBLEoXWohg6HO2x7UiJ7mVhdxkkO67XCm5NLVORhB6iCvAapiPxNKJn5BZHTkxBlSi12sAMYSYc7Fe-ErULMxFN4ECOKYqrqdFb_22wr4lEFC-qcf3g8SDD1YYo_gQFEbOriwLQKuc_LzZ9-dw0LjgDqrTk4rc0RRLmsFVO7CD5LQWMkcHC_r1r_P65b2z0RytfURIz2yAJjAq8yHG6Vv1ec87A4L3vJusF0M8cYRpAA0l5huVveTwn53pHRhkdZYJAYMjhOknXWYAEVx_951oYJRqu4f_KlA=w1006-h440-no" alt="github01"><br>然后点击Create Repostory完成。</p>
<p>终端cd到blog文件夹下，vim打开_config.yml，(也可使用编辑器打开)命令如下：</p>
<p><code>$ vim _config.yml</code></p>
<p>打开后往下滑到最后，修改成下边的样子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">type: git</div><div class="line">  repository: https://github.com/username/username.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<blockquote>
<p>你需要将repository后username换成你自己的用户名，需要注意的是<strong>冒号后面都有一个空格</strong></p>
</blockquote>
<p>在blog文件夹目录下执行生成静态页面命令：</p>
<p><code>$ hexo generate        或者：hexo g</code></p>
<blockquote>
<p>此时若出现如下报错：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ERROR Local hexo not found in ~/blog</div><div class="line">ERROR Try runing: &apos;npm install hexo --save‘</div></pre></td></tr></table></figure>
<blockquote>
<p>则执行命令：<code>npm install hexo --save</code><br>若无报错，自行忽略此步骤。</p>
</blockquote>
<p>再执行配置命令：<br><code>$ hexo deploy     或者：hexo d</code></p>
<blockquote>
<p>若执行命令hexo deploy仍然报错：无法连接git或找不到git，则执行如下命令来安装hexo-deployer-git：<code>$ npm install hexo-deployer-git --save</code><br>再次执行hexo generate和hexo deploy命令。  </p>
</blockquote>
<p>若你未关联Github，则执行hexo deploy命令时终端会提示你输入Github的用户名和密码，即</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Username for &apos;https://github.com&apos;:</div><div class="line">Password for &apos;https://github.com&apos;:</div></pre></td></tr></table></figure>
<blockquote>
<p>hexo deploy命令执行成功后，浏览器中打开网址<a href="http://jimmyju.github.io">http://jimmyju.github.io</a>（将jimmyju换成你的用户名）能看到和打开<a href="http://localhost:4000时一样的页面。" target="_blank" rel="external">http://localhost:4000时一样的页面。</a></p>
</blockquote>
<h4 id="2-添加ssh-key到Github"><a href="#2-添加ssh-key到Github" class="headerlink" title="2.添加ssh key到Github"></a>2.添加ssh key到Github</h4><h5 id="1-执行如下命令生成ssh-key"><a href="#1-执行如下命令生成ssh-key" class="headerlink" title="1.执行如下命令生成ssh key:"></a>1.执行如下命令生成ssh key:</h5><p><code>$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code></p>
<blockquote>
<p>注意将<code>your_email@example.com</code>换成你自己注册Github的邮箱地址。<br>默认会在相应路径下（~/.ssh/id_rsa.pub）生成id_rsa和id_rsa.pub两个文件。</p>
</blockquote>
<h5 id="2-添加ssh-key到github中："><a href="#2-添加ssh-key到github中：" class="headerlink" title="2.添加ssh key到github中："></a>2.添加ssh key到github中：</h5><blockquote>
<p>Find前往文件夹~/.ssh/id_rsa.pub打开id_rsa.pub文件，里面的信息即为SSH key，将这些信息复制到Github的Add SSH key页面即可。</p>
<p>进入Github –&gt; Settings –&gt; SSH keys –&gt; add SSH key:</p>
<p>Title里任意添一个标题，将复制的内容粘贴到Key里，点击下方Add key绿色按钮即可。</p>
</blockquote>
<h5 id="3-接下来就是发布文章了，终端cd到blog文件夹下，执行如下命令新建文章："><a href="#3-接下来就是发布文章了，终端cd到blog文件夹下，执行如下命令新建文章：" class="headerlink" title="3.接下来就是发布文章了，终端cd到blog文件夹下，执行如下命令新建文章："></a>3.接下来就是发布文章了，终端cd到blog文件夹下，执行如下命令新建文章：</h5><p><code>$ hexo new &quot;postName&quot;</code></p>
<blockquote>
<p>名为postName.md的文件会建在目录/blog/source/_posts下，postName是文件名，为方便链接不建议掺杂汉字。你当然可以用vim来编辑文章。我用的MWeb编辑器，如果你有好用的markdown编辑器请推荐给我，感激不尽！</p>
</blockquote>
<p>注：<strong>文章编辑完成后，终端cd到blog文件夹下，执行如下命令来发布：</strong></p>
<p><code>$ hexo generate    可简化成：hexo g</code>        //生成静态页面<br><code>$ hexo deploy    可简化成：hexo d</code>    //将文章部署到Github</p>
<blockquote>
<p>至此，Mac上搭建基于Github的Hexo博客就完成了。</p>
</blockquote>
<h4 id="博客主题"><a href="#博客主题" class="headerlink" title="博客主题"></a>博客主题</h4><p>下面就说一下安装主题的方法，这里可以你可以到<a href="https://hexo.io/themes/" target="_blank" rel="external">Hexo官网主题</a>页去搜寻自己喜欢的theme。这里以hexo-theme-next为例, <strong>注意：</strong> 每根换一次主题之前，运行如下命令：<br><code>$ hexo clean   //清除缓存文件</code></p>
<h5 id="1-终端cd到-blog-目录下执行如下命令："><a href="#1-终端cd到-blog-目录下执行如下命令：" class="headerlink" title="1.终端cd到 blog 目录下执行如下命令："></a>1.终端cd到 blog 目录下执行如下命令：</h5><p><code>$ git clone https://github.com/iissnan/hexo-theme-next themes/next</code></p>
<blockquote>
<p>然后将blog目录下_config.yml里theme的名称landscape修改为next</p>
</blockquote>
<h5 id="2-终端cd到blog目录下执行如下命令-每次部署文章的步骤-："><a href="#2-终端cd到blog目录下执行如下命令-每次部署文章的步骤-：" class="headerlink" title="2.终端cd到blog目录下执行如下命令(每次部署文章的步骤)："></a>2.终端cd到blog目录下执行如下命令(每次部署文章的步骤)：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ hexo clean		//清除缓存文件 (db.json) 和已生成的静态文件 (public)</div><div class="line"></div><div class="line">$ hexo g		//生成缓存和静态文件</div><div class="line"></div><div class="line">$ hexo d		//重新部署到服务器</div></pre></td></tr></table></figure>
<blockquote>
<p>至于更改theme内容比如名称、描述、头像等去修改blog/_config.yml文件和blog/themes/next/_config.yml文件中对应的属性名称即可， 不要忘记冒号:后加空格。 <a href="http://theme-next.iissnan.com" target="_blank" rel="external">NexT 使用文档</a>里有极详细的介绍。</p>
</blockquote>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>以上便是我博客的全过程。。。。。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">hexo官网</a></li>
<li><a href="http://theme-next.iissnan.com" target="_blank" rel="external">NexT</a></li>
<li><a href="http://gonghonglou.com" target="_blank" rel="external">与佳期的个人博客</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于最近刚搭建的博客，所以特此来记录下我的个人经验。注：本文使用的环境为Mac OS。Windows的也基本差不多，可以参考。&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://jimmyju.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Markdown</title>
    <link href="https://jimmyju.github.io/2017/05/29/Markdown/"/>
    <id>https://jimmyju.github.io/2017/05/29/Markdown/</id>
    <published>2017-05-29T12:17:32.000Z</published>
    <updated>2017-05-29T12:23:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown-语法和-MWeb-写作使用说明"><a href="#Markdown-语法和-MWeb-写作使用说明" class="headerlink" title="Markdown 语法和 MWeb 写作使用说明"></a>Markdown 语法和 MWeb 写作使用说明</h1><h2 id="Markdown-的设计哲学"><a href="#Markdown-的设计哲学" class="headerlink" title="Markdown 的设计哲学"></a>Markdown 的设计哲学</h2><blockquote>
<p>Markdown 的目標是實現「易讀易寫」。<br>不過最需要強調的便是它的可讀性。一份使用 Markdown 格式撰寫的文件應該可以直接以純文字發佈，並且看起來不會像是由許多標籤或是格式指令所構成。<br>Markdown 的語法有個主要的目的：用來作為一種網路內容的<em>寫作</em>用語言。</p>
</blockquote>
<a id="more"></a>
<h2 id="本文约定"><a href="#本文约定" class="headerlink" title="本文约定"></a>本文约定</h2><p>如果有写 <code>效果如下：</code>， 在 MWeb 编辑状态下只有用 <code>CMD + 4</code> 或 <code>CMD + R</code> 预览才可以看效果。</p>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>Markdown 语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 第一级标题 `&lt;h1&gt;` </div><div class="line">## 第二级标题 `&lt;h2&gt;` </div><div class="line">###### 第六级标题 `&lt;h6&gt;`</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<h1 id="第一级标题-lt-h1-gt"><a href="#第一级标题-lt-h1-gt" class="headerlink" title="第一级标题 &lt;h1&gt;"></a>第一级标题 <code>&lt;h1&gt;</code></h1><h2 id="第二级标题-lt-h2-gt"><a href="#第二级标题-lt-h2-gt" class="headerlink" title="第二级标题 &lt;h2&gt;"></a>第二级标题 <code>&lt;h2&gt;</code></h2><h6 id="第六级标题-lt-h6-gt"><a href="#第六级标题-lt-h6-gt" class="headerlink" title="第六级标题 &lt;h6&gt;"></a>第六级标题 <code>&lt;h6&gt;</code></h6><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>Markdown 语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">*这些文字会生成`&lt;em&gt;`*</div><div class="line">_这些文字会生成`&lt;u&gt;`_</div><div class="line"></div><div class="line">**这些文字会生成`&lt;strong&gt;`**</div><div class="line">__这些文字会生成`&lt;strong&gt;`__</div></pre></td></tr></table></figure>
<p>在 MWeb 中的快捷键为： <code>CMD + U</code>、<code>CMD + I</code>、<code>CMD + B</code><br>效果如下：</p>
<p><em>这些文字会生成<code>&lt;em&gt;</code></em><br><em>这些文字会生成<code>&lt;u&gt;</code></em></p>
<p><strong>这些文字会生成<code>&lt;strong&gt;</code></strong><br><strong>这些文字会生成<code>&lt;strong&gt;</code></strong></p>
<h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>四个及以上空格加回车。<br>如果不想打这么多空格，只要回车就为换行，请勾选：<code>Preferences</code> - <code>Themes</code> - <code>Translate newlines to &lt;br&gt; tags</code></p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>Markdown 语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">* 项目一 无序列表 `* + 空格键`</div><div class="line">* 项目二</div><div class="line">* 项目二的子项目一 无序列表 `TAB + * + 空格键`</div><div class="line">* 项目二的子项目二</div></pre></td></tr></table></figure>
<p>在 MWeb 中的快捷键为： <code>Option + U</code><br>效果如下：</p>
<ul>
<li>项目一 无序列表 <code>* + 空格键</code></li>
<li>项目二</li>
<li>项目二的子项目一 无序列表 <code>TAB + * + 空格键</code></li>
<li>项目二的子项目二</li>
</ul>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>Markdown 语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1. 项目一 有序列表 `数字 + . + 空格键`</div><div class="line">2. 项目二 </div><div class="line">3. 项目三</div><div class="line">1. 项目三的子项目一 有序列表 `TAB + 数字 + . + 空格键`</div><div class="line">2. 项目三的子项目二</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<ol>
<li>项目一 有序列表 <code>数字 + . + 空格键</code></li>
<li>项目二 </li>
<li>项目三</li>
<li>项目三的子项目一 有序列表 <code>TAB + 数字 + . + 空格键</code></li>
<li>项目三的子项目二</li>
</ol>
<h3 id="任务列表（Task-lists）"><a href="#任务列表（Task-lists）" class="headerlink" title="任务列表（Task lists）"></a>任务列表（Task lists）</h3><p>Markdown 语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- [ ] 任务一 未做任务 `- + 空格 + [ ]`</div><div class="line">- [x] 任务二 已做任务 `- + 空格 + [x]`</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<ul>
<li>[ ] 任务一 未做任务 <code>- + 空格 + [ ]</code></li>
<li>[x] 任务二 已做任务 <code>- + 空格 + [x]</code></li>
</ul>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>Markdown 语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">![GitHub set up](http://zh.mweb.im/asset/img/set-up-git.gif)</div><div class="line">格式: ![Alt Text](url)</div></pre></td></tr></table></figure>
<p><code>Control + Shift + I</code> 可插入Markdown语法。<br>如果是 MWeb 的文档库中的文档，还可以用拖放图片、<code>CMD + V</code> 粘贴、<code>CMD + Option + I</code> 导入这三种方式来增加图片。<br>效果如下：</p>
<p><img src="http://zh.mweb.im/asset/img/set-up-git.gif" alt="GitHub set up"></p>
<p>MWeb 引入的特别的语法来设置图片宽度，方法是在图片描述后加 <code>-w + 图片宽度</code> 即可，比如说要设置上面的图片的宽度为 140，语法如下：</p>
<p><img src="http://zh.mweb.im/asset/img/set-up-git.gif" alt="GitHub set up-w140"></p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>Markdown 语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">email &lt;example@example.com&gt;</div><div class="line">[GitHub](http://github.com)</div><div class="line">自动生成连接  &lt;http://www.github.com/&gt;</div></pre></td></tr></table></figure>
<p><code>Control + Shift + L</code> 可插入Markdown语法。<br>如果是 MWeb 的文档库中的文档，拖放或<code>CMD + Option + I</code> 导入非图片时，会生成连接。<br>效果如下：</p>
<p>Email 连接： <a href="&#x6d;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#58;&#101;&#x78;&#x61;&#x6d;&#112;&#108;&#x65;&#64;&#101;&#x78;&#97;&#109;&#x70;&#x6c;&#101;&#46;&#99;&#x6f;&#x6d;">&#101;&#x78;&#x61;&#x6d;&#112;&#108;&#x65;&#64;&#101;&#x78;&#97;&#109;&#x70;&#x6c;&#101;&#46;&#99;&#x6f;&#x6d;</a><br><a href="http://github.com" target="_blank" rel="external">连接标题Github网站</a><br>自动生成连接像： <a href="http://www.github.com/" target="_blank" rel="external">http://www.github.com/</a> 这样</p>
<h2 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h2><p>Markdown 语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">某某说:</div><div class="line">&gt; 第一行引用</div><div class="line">&gt; 第二行费用文字</div></pre></td></tr></table></figure>
<p><code>CMD + Shift + B</code> 可插入Markdown语法。<br>效果如下：</p>
<p>某某说:</p>
<blockquote>
<p>第一行引用<br>第二行费用文字</p>
</blockquote>
<h2 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h2><p>Markdown 语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">像这样即可：`&lt;addr&gt;` `code`</div></pre></td></tr></table></figure>
<p><code>CMD + K</code> 可插入Markdown语法。<br>效果如下：</p>
<p>像这样即可：<code>&lt;addr&gt;</code> <code>code</code></p>
<h2 id="多行或者一段代码"><a href="#多行或者一段代码" class="headerlink" title="多行或者一段代码"></a>多行或者一段代码</h2><p>Markdown 语法：</p>
<pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fancyAlert</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(arg) &#123;</div><div class="line">    $.facebox(&#123;<span class="attr">div</span>:<span class="string">'#foo'</span>&#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p><code>CMD + Shift + K</code> 可插入Markdown语法。<br>效果如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fancyAlert</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(arg) &#123;</div><div class="line">    $.facebox(&#123;<span class="attr">div</span>:<span class="string">'#foo'</span>&#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="顺序图或流程图"><a href="#顺序图或流程图" class="headerlink" title="顺序图或流程图"></a>顺序图或流程图</h2><p>Markdown 语法：</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">张三-&gt;李四: 嘿，小四儿, 写博客了没?</div><div class="line">Note right of 李四: 李四愣了一下，说：</div><div class="line">李四--&gt;张三: 忙得吐血，哪有时间写。</div></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: 开始</div><div class="line">e=&gt;end: 结束</div><div class="line">op=&gt;operation: 我的操作</div><div class="line">cond=&gt;condition: 确认？</div><div class="line"></div><div class="line">st-&gt;op-&gt;cond</div><div class="line">cond(yes)-&gt;e</div><div class="line">cond(no)-&gt;op</div></pre></td></tr></table></figure>
</code></pre><p>效果如下（ <code>Preferences</code> - <code>Themes</code> - <code>Enable sequence &amp; flow chart</code> 才会看到效果 ）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">张三-&gt;李四: 嘿，小四儿, 写博客了没?</div><div class="line">Note right of 李四: 李四愣了一下，说：</div><div class="line">李四--&gt;张三: 忙得吐血，哪有时间写。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: 开始</div><div class="line">e=&gt;end: 结束</div><div class="line">op=&gt;operation: 我的操作</div><div class="line">cond=&gt;condition: 确认？</div><div class="line"></div><div class="line">st-&gt;op-&gt;cond</div><div class="line">cond(yes)-&gt;e</div><div class="line">cond(no)-&gt;op</div></pre></td></tr></table></figure>
<p>更多请参考：<a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="external">http://bramp.github.io/js-sequence-diagrams/</a>, <a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="external">http://adrai.github.io/flowchart.js/</a></p>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>Markdown 语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">第一格表头 | 第二格表头</div><div class="line">--------- | -------------</div><div class="line">内容单元格 第一列第一格 | 内容单元格第二列第一格</div><div class="line">内容单元格 第一列第二格 多加文字 | 内容单元格第二列第二格</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<table>
<thead>
<tr>
<th>第一格表头</th>
<th>第二格表头</th>
</tr>
</thead>
<tbody>
<tr>
<td>内容单元格 第一列第一格</td>
<td>内容单元格第二列第一格</td>
</tr>
<tr>
<td>内容单元格 第一列第二格 多加文字</td>
<td>内容单元格第二列第二格</td>
</tr>
</tbody>
</table>
<h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>Markdown 语法：</p>
<p>加删除线像这样用： <del>删除这些</del></p>
<p>效果如下：</p>
<p>加删除线像这样用： <del>删除这些</del></p>
<h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>以下三种方式都可以生成分隔线：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">***</div><div class="line"></div><div class="line">*****</div><div class="line"></div><div class="line">- - -</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<hr>
<hr>
<hr>
<h2 id="MathJax"><a href="#MathJax" class="headerlink" title="MathJax"></a>MathJax</h2><p>Markdown 语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">块级公式：</div><div class="line">$$	x = \dfrac&#123;-b \pm \sqrt&#123;b^2 - 4ac&#125;&#125;&#123;2a&#125; $$</div><div class="line"></div><div class="line">\\[ \frac&#123;1&#125;&#123;\Bigl(\sqrt&#123;\phi \sqrt&#123;5&#125;&#125;-\phi\Bigr) e^&#123;\frac25 \pi&#125;&#125; =</div><div class="line">1+\frac&#123;e^&#123;-2\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-4\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-6\pi&#125;&#125;</div><div class="line">&#123;1+\frac&#123;e^&#123;-8\pi&#125;&#125; &#123;1+\ldots&#125; &#125; &#125; &#125; \\]</div><div class="line"></div><div class="line">行内公式： $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$</div></pre></td></tr></table></figure>
<p>效果如下（<code>Preferences</code> - <code>Themes</code> - <code>Enable MathJax</code> 才会看到效果）：</p>
<p>块级公式：<br>$$    x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p>
<p>\[ \frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} =<br>1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}}<br>{1+\frac{e^{-8\pi}} {1+\ldots} } } } \]</p>
<p>行内公式： $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$</p>
<h2 id="脚注（Footnote）"><a href="#脚注（Footnote）" class="headerlink" title="脚注（Footnote）"></a>脚注（Footnote）</h2><p>Markdown 语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是一个脚注：[^sample_footnote]</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p>这是一个脚注：<a href="这里是脚注信息">^sample_footnote</a></p>
<h2 id="注释和阅读更多"><a href="#注释和阅读更多" class="headerlink" title="注释和阅读更多"></a>注释和阅读更多</h2><!-- comment -->
<!-- more -->
<p>Actions-&gt;Insert Read More Comment <em>或者</em> <code>Command + .</code><br><strong>注</strong> 阅读更多的功能只用在生成网站或博客时，插入时注意要后空一行。</p>
<h2 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h2><p>Markdown 语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[TOC]</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p>[TOC]</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Markdown-语法和-MWeb-写作使用说明&quot;&gt;&lt;a href=&quot;#Markdown-语法和-MWeb-写作使用说明&quot; class=&quot;headerlink&quot; title=&quot;Markdown 语法和 MWeb 写作使用说明&quot;&gt;&lt;/a&gt;Markdown 语法和 MWeb 写作使用说明&lt;/h1&gt;&lt;h2 id=&quot;Markdown-的设计哲学&quot;&gt;&lt;a href=&quot;#Markdown-的设计哲学&quot; class=&quot;headerlink&quot; title=&quot;Markdown 的设计哲学&quot;&gt;&lt;/a&gt;Markdown 的设计哲学&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Markdown 的目標是實現「易讀易寫」。&lt;br&gt;不過最需要強調的便是它的可讀性。一份使用 Markdown 格式撰寫的文件應該可以直接以純文字發佈，並且看起來不會像是由許多標籤或是格式指令所構成。&lt;br&gt;Markdown 的語法有個主要的目的：用來作為一種網路內容的&lt;em&gt;寫作&lt;/em&gt;用語言。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
